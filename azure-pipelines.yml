# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

strategy:
  matrix:
    linux:
      imageName: "ubuntu-18.04"
    mac:
      imageName: "macos-10.15"
    windows:
      imageName: "windows-2019"

pool:
  vmImage: $(imageName)

steps:

# Universal
- bash: |
    git clone --branch develop --depth 1 https://github.com/matrix-org/matrix-js-sdk.git
    cd matrix-js-sdk/
    yarn install && yarn link
    cd ..
    git clone --branch develop --depth 1 https://github.com/matrix-org/matrix-react-sdk.git
    cd matrix-react-sdk/
    yarn link matrix-js-sdk
    yarn link && yarn install
    cd ..
    git clone https://github.com/vector-im/riot-web.git
    cd riot-web/
    git checkout develop
    riotversion=$(git describe --dirty --tags)
    jq .version="\"$riotversion\"" package.json > package.json.new
    mv package.json.new package.json
    cat electron_app/package.json | jq .version="\"$riotversion\"" > electron_app/package.json.new
    mv electron_app/package.json.new electron_app/package.json
    yarn link matrix-js-sdk && yarn link matrix-react-sdk
    curl https://riot.im/develop/config.json | jq '.features += {"feature_event_indexing": "labs"}' > config.json
    yarn install

# Linux
- bash: |
    sudo apt-get install -y sqlcipher libsqlcipher-dev
    cd riot-web/ 
    elecversion=$(jq -r .build.electronVersion package.json)
    yarn add --dev electron@$elecversion
    cd electron_app/
    yarn add matrix-seshat --ignore-scripts
    yarn add electron-build-env
    yarn run electron-build-env -- --electron $elecversion -- neon build matrix-seshat --release
    cd ..
    yarn build
    yarn build:electron:linux
    rm -r electron_app/dist/*-unpacked
  condition: eq( variables['Agent.OS'], 'Linux' )
  displayName: Linux Build

# Windows
- bash: |
    cd riot-web/ 
    elecversion=$(jq -r .build.electronVersion package.json)
    jq 'del(.build.win.sign)' package.json > package.json.new
    mv package.json.new package.json
    cat package.json
    yarn build
    yarn build:electron:windows
    rm -r electron_app/dist/*-unpacked
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: Windows Build

# mac
- bash: |
    brew install sqlcipher
    cd riot-web/ 
    elecversion=$(jq -r .build.electronVersion package.json)
    jq 'del(.build.afterSign)' package.json > package.json.new
    mv package.json.new package.json
    cat package.json
    yarn add --dev electron@$elecversion
    cd electron_app/
    yarn add matrix-seshat --ignore-scripts
    yarn add electron-build-env
    yarn run electron-build-env -- --electron $elecversion -- neon build matrix-seshat --release
    cd ..
    yarn build
    yarn build:electron:macos -c.mac.identity=null --publish never
    rm -r electron_app/dist/mac
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: macos Build


- publish: $(System.DefaultWorkingDirectory)/riot-web/electron_app/dist/
  artifact: Riot_$(Agent.OS)
  displayName: Publish
